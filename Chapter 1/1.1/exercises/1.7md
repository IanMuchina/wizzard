## Exercise 1.7:

The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers.

TASK: Explain these statements, with examples showing how the test fails for small and large numbers.

An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess.

TASK: Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

## THoughts

I tried using javscript but it kept on going into an infinite loop, which eventualy triggered the nodejs error "Maximum call stack size exceeded" (after 8876 iterations when only 6 were enough). I used racket sicp and i just saw a blank screen. Just like the book says, this is not very effective. We are doing multiple redundant computations that are exactly the same. Tail call optimization, [used in racket & other languages](https://en.wikipedia.org/wiki/Tail_call#By_language) will only make it go to infinity. So rewriting in another language that optimizes the bad code won't cut it.

## Solution

The solution is to watch the changes between guesses. I think stopping once the changes stop since they can't be represeted in floating point is a better test since we stop doing infinite repeated math. Do we need another test to check the using 1^x to determine presicion? IDK.

I think checking if the difference between guesses is zero accounts for 2 things:

1. When we find the answer
2. When the real answer cannot be represented by floats
